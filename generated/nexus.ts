/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import * as Context from "../pages/api/context"



declare global {
  interface NexusGenCustomOutputProperties<TypeName extends string> {
    crud: NexusPrisma<TypeName, 'crud'>
    model: NexusPrisma<TypeName, 'model'>
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  ClientWhereUniqueInput: { // input type
    id?: number | null; // Int
  }
  TaskWhereUniqueInput: { // input type
    id?: number | null; // Int
  }
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
}

export interface NexusGenRootTypes {
  Client: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: number; // Int!
    name: string; // String!
    rate: number; // Float!
    vatId: string; // String!
  }
  Query: {};
  Task: { // root type
    clientId: number; // Int!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    description: string; // String!
    id: number; // Int!
    specialRate: number; // Float!
  }
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  ClientWhereUniqueInput: NexusGenInputs['ClientWhereUniqueInput'];
  TaskWhereUniqueInput: NexusGenInputs['TaskWhereUniqueInput'];
  String: NexusGenScalars['String'];
  Int: NexusGenScalars['Int'];
  Float: NexusGenScalars['Float'];
  Boolean: NexusGenScalars['Boolean'];
  ID: NexusGenScalars['ID'];
  DateTime: NexusGenScalars['DateTime'];
}

export interface NexusGenFieldTypes {
  Client: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: number; // Int!
    name: string; // String!
    rate: number; // Float!
    tasks: NexusGenRootTypes['Task'][]; // [Task!]!
    vatId: string; // String!
  }
  Query: { // field return type
    client: NexusGenRootTypes['Client'] | null; // Client
    task: NexusGenRootTypes['Task'] | null; // Task
  }
  Task: { // field return type
    client: NexusGenRootTypes['Client']; // Client!
    clientId: number; // Int!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    description: string; // String!
    id: number; // Int!
    specialRate: number; // Float!
  }
}

export interface NexusGenFieldTypeNames {
  Client: { // field return type name
    createdAt: 'DateTime'
    id: 'Int'
    name: 'String'
    rate: 'Float'
    tasks: 'Task'
    vatId: 'String'
  }
  Query: { // field return type name
    client: 'Client'
    task: 'Task'
  }
  Task: { // field return type name
    client: 'Client'
    clientId: 'Int'
    createdAt: 'DateTime'
    description: 'String'
    id: 'Int'
    specialRate: 'Float'
  }
}

export interface NexusGenArgTypes {
  Query: {
    client: { // args
      where: NexusGenInputs['ClientWhereUniqueInput']; // ClientWhereUniqueInput!
    }
    task: { // args
      where: NexusGenInputs['TaskWhereUniqueInput']; // TaskWhereUniqueInput!
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "Client" | "Query" | "Task";

export type NexusGenInputNames = "ClientWhereUniqueInput" | "TaskWhereUniqueInput";

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = "Boolean" | "DateTime" | "Float" | "ID" | "Int" | "String";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: Context.Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
}